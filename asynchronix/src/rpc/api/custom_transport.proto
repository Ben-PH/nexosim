// Additional types for transport implementations which, unlike gRPC, do not
// support auto-generation from the `Simulation` service description.

syntax = "proto3";
package custom_transport;

import "simulation.proto";

enum ServerErrorCode {
  UNKNOWN_REQUEST = 0;
  EMPTY_REQUEST = 1;
}

message ServerError {
  ServerErrorCode code = 1;
  string message = 2;
}

message AnyRequest {
  oneof request { // Expects exactly 1 variant.
    simulation.InitRequest init_request = 1;
    simulation.TimeRequest time_request = 2;
    simulation.StepRequest step_request = 3;
    simulation.StepUntilRequest step_until_request = 4;
    simulation.ScheduleEventRequest schedule_event_request = 5;
    simulation.CancelEventRequest cancel_event_request = 6;
    simulation.ProcessEventRequest process_event_request = 7;
    simulation.ProcessQueryRequest process_query_request = 8;
    simulation.ReadEventsRequest read_events_request = 9;
    simulation.OpenSinkRequest open_sink_request = 10;
    simulation.CloseSinkRequest close_sink_request = 11;
  }
}

message AnyReply {
  oneof reply { // Contains exactly 1 variant.
    simulation.InitReply init_reply = 1;
    simulation.TimeReply time_reply = 2;
    simulation.StepReply step_reply = 3;
    simulation.StepUntilReply step_until_reply = 4;
    simulation.ScheduleEventReply schedule_event_reply = 5;
    simulation.CancelEventReply cancel_event_reply = 6;
    simulation.ProcessEventReply process_event_reply = 7;
    simulation.ProcessQueryReply process_query_reply = 8;
    simulation.ReadEventsReply read_events_reply = 9;
    simulation.OpenSinkReply open_sink_reply = 10;
    simulation.CloseSinkReply close_sink_reply = 11;
    ServerError error = 100;
  }
}
