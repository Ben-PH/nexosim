// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ServerError {
    #[prost(enumeration = "ServerErrorCode", tag = "1")]
    pub code: i32,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AnyRequest {
    /// Expects exactly 1 variant.
    #[prost(oneof = "any_request::Request", tags = "1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11")]
    pub request: ::core::option::Option<any_request::Request>,
}
/// Nested message and enum types in `AnyRequest`.
pub mod any_request {
    /// Expects exactly 1 variant.
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Request {
        #[prost(message, tag = "1")]
        InitRequest(super::super::simulation::InitRequest),
        #[prost(message, tag = "2")]
        TimeRequest(super::super::simulation::TimeRequest),
        #[prost(message, tag = "3")]
        StepRequest(super::super::simulation::StepRequest),
        #[prost(message, tag = "4")]
        StepUntilRequest(super::super::simulation::StepUntilRequest),
        #[prost(message, tag = "5")]
        ScheduleEventRequest(super::super::simulation::ScheduleEventRequest),
        #[prost(message, tag = "6")]
        CancelEventRequest(super::super::simulation::CancelEventRequest),
        #[prost(message, tag = "7")]
        ProcessEventRequest(super::super::simulation::ProcessEventRequest),
        #[prost(message, tag = "8")]
        ProcessQueryRequest(super::super::simulation::ProcessQueryRequest),
        #[prost(message, tag = "9")]
        ReadEventsRequest(super::super::simulation::ReadEventsRequest),
        #[prost(message, tag = "10")]
        OpenSinkRequest(super::super::simulation::OpenSinkRequest),
        #[prost(message, tag = "11")]
        CloseSinkRequest(super::super::simulation::CloseSinkRequest),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AnyReply {
    /// Contains exactly 1 variant.
    #[prost(oneof = "any_reply::Reply", tags = "1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 100")]
    pub reply: ::core::option::Option<any_reply::Reply>,
}
/// Nested message and enum types in `AnyReply`.
pub mod any_reply {
    /// Contains exactly 1 variant.
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Reply {
        #[prost(message, tag = "1")]
        InitReply(super::super::simulation::InitReply),
        #[prost(message, tag = "2")]
        TimeReply(super::super::simulation::TimeReply),
        #[prost(message, tag = "3")]
        StepReply(super::super::simulation::StepReply),
        #[prost(message, tag = "4")]
        StepUntilReply(super::super::simulation::StepUntilReply),
        #[prost(message, tag = "5")]
        ScheduleEventReply(super::super::simulation::ScheduleEventReply),
        #[prost(message, tag = "6")]
        CancelEventReply(super::super::simulation::CancelEventReply),
        #[prost(message, tag = "7")]
        ProcessEventReply(super::super::simulation::ProcessEventReply),
        #[prost(message, tag = "8")]
        ProcessQueryReply(super::super::simulation::ProcessQueryReply),
        #[prost(message, tag = "9")]
        ReadEventsReply(super::super::simulation::ReadEventsReply),
        #[prost(message, tag = "10")]
        OpenSinkReply(super::super::simulation::OpenSinkReply),
        #[prost(message, tag = "11")]
        CloseSinkReply(super::super::simulation::CloseSinkReply),
        #[prost(message, tag = "100")]
        Error(super::ServerError),
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ServerErrorCode {
    UnknownRequest = 0,
    EmptyRequest = 1,
}
impl ServerErrorCode {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ServerErrorCode::UnknownRequest => "UNKNOWN_REQUEST",
            ServerErrorCode::EmptyRequest => "EMPTY_REQUEST",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN_REQUEST" => Some(Self::UnknownRequest),
            "EMPTY_REQUEST" => Some(Self::EmptyRequest),
            _ => None,
        }
    }
}
